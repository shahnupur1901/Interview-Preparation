Basic :

show databases;
create database database_name;
use database_name;
desc table_name;
select col1, col2, from Table_name;
select version();
select now();
select current_date();

CRUD :
Create a Table :
1. Creation
create Table students(
    -> c_no int auto_increment primary key,
    -> name varchar(20) not null,
    -> city varchar(10) default "Pune",
    -> age int check(age>18),
    -> phonenum bigint unique);

auto increment starts by 1 by default.

create table payment( 
    -> p_no int auto_increment primary key,
    -> p_amt int default 10000,
    -> p_date date,
    -> c_no int not null,
    -> foreign key(c_no) references students(c_no));
    
For easy deletion :
create table payment( 
    -> p_no int auto_increment primary key,
    -> p_amt int default 10000,
    -> p_date date,
    -> c_no int not null,
    -> foreign key(c_no) references students(c_no) on delete cascade);
  
2. Insertion : 
into students :
insert into students values (null, "Nupur", default, 99999999); //city = Pune, autoincrement works independently
insert into students values (null, "Nur", "Boston", 99994444);

Alter a table : 
1. auto_increment
alter table students auto_increment = 100;

2. Foreign key deletion, drop earlier constraint. Add new constraint with delete on cascade constraint
show create table table_name;
ALTER TABLE table_name DROP FOREIGN KEY constraint_name; //constraint name = "purchase_fk_1" type 
alter table Purchase add constraint c_no foreign key(c_no) references Customer(c_no) on delete cascade;

3. Add a column 
  alter table student add percent int //alter table student add newcolname datatype 

4. Drop a column
  alter table students drop column percent;
  
5. Modify data type of column
  alter table student alter column phoneNum string
  

3. Update
update Item
    ->set i_price = 100;
    where i_no = 22;
    
4. Delete 
Delete row
delete from Purchase where p_id = 5;
Delete column
alter table students drop name;
Delete table
drop students;


5. Order by
select i_name from Item order by i_price;
select i_name from Item order by i_price desc;

6. pattern matching : like
1. select i_name from Item where i_name like "_n%";
2. sttarting with S : select i_name from Item where i_name like "S%";
3. ending with fy : select * from Item where name like "%fy";
4. Containing w : select * from Item where name like "%w%";
5. Containing 5 characters : select * from Item where name like "_____"; (_*5)


AGGREGATE FUNCTIONS
7. min, avg, sum, max,count :
select min(i_price) from Item;
select i_name, i_price from Item
where i_price = (select min(i_price) from Item);

NULL : is null / is not null

7. Regexp

8. Limit
select * from Item limit 5; --first 5 shown
select * from Item limit 3,4; -- start after record 3, get 4 records. you get 4 5 6 7 records

9. distinct
select distinct city from emp; -- distinct cities shown

10. count rows 
select count(*) from emp;

11. between
select * from emp
where price between 10000 and 50000

12 Date
select * from emp where month(joindate)=3 and year(jiondate)= 2018

13. group by - having
- Partition groupwise
- aggregate functions on each group
- filter aggregates with having clause, or restrict to grouped
- count(*) will not ignore null, others will.
- having vs where : where on all rows, having on groups
select count(empid), department group by department;



14. Upper case
seelct upper(name) from emp;

15. Period operator
say student and enrolment are 2 tables with student_id
select student.student_id, enrolment.
where student.student_id = enrolment.student_id

16. In operator
select * from Item where i_price in (100, 200, 500);

17. All
select * from Item where i_price < all(select 

18. Any

19. Date :
select current_date();
update Purchase set p_date = (select current_date()) 
select p_no, date_format(p_date,"%M %D %Y %r") from Purchase;

20. Union
select * from Customer where i_no = 1
union 
select * from Customer where i_no = 5















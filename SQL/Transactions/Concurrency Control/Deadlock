A system is in a deadlock state, if there exists a set of transactions such that every transaction in the set is waiting for another transaction in the set.
Waiting transactions t0,t1,t2,...tn-1, such that t0->t1, t1->t2, t3->t4,...tn-1->t0  =  deadlock

Conditions required for deadlock
Mutual Exclusion
Hold n wait
No pre-emption
Circular wait

T1              T2
lock-X on X
write X
                lock-X on Y
                write Y
                lock-X on X----> has to wait
lock-X on Y----> has to wait

Less efficiency, resource utilization, nothing is happening!

Deadlock Prevention
If any 1 necessary deadlock condition is made false

1. Acquire all locks needed for a transaction before execution -conservative 2PL
2. For no cyclic wait : Order the data items. Acquire locks in increasing fashion, if a smaller is reqd, release the locks>reqd lock
3. Wait and die : Non-pre-emptive : Ti--wants--> Q--is locked on by->Tj
if timestamp i < timestamp j (i is older than j) ,Ti must wait
else Ti is younger and should rollback, but here timestamp is not updated. So, Ti is dies multple dies before getting lock.
4. Wound Wait : Pre-emptive : Ti--wants--> Q--is locked on by->Tj
if timestamp i < timestamp j (i is older than j) ,resource from Tj preempted, given to Ti
else Ti is younger and should wait.
5. Lock timeout : Wait for x time, if lock acquired, good, else rollback

Deadlock Detection : Wait-for graph

Deadlock recovery:
Rollback transaction with minimum costs
cost = number of rollback
